angular.module("app",["ngRoute"]),angular.module("app").controller("ApplicationCtrl",["$scope",function(t){t.$on("login",function(n,e){t.currentUser=e}),t.logout=function(){delete t.currentUser}}]),angular.module("app").controller("LoginCtrl",["$scope","UserSvc",function(t,n){t.login=function(e,o){n.login(e,o).then(function(n){t.$emit("login",n.data),t.username=null,t.password=null})}}]),angular.module("app").controller("PostsCtrl",["$scope","PostsSvc",function(t,n){t.addPost=function(){t.postBody&&n.create({username:"dickeyxxx",body:t.postBody}).success(function(n){t.posts.unshift(n),t.postBody=null})},n.fetch().success(function(n){t.posts=n})}]),angular.module("app").service("PostsSvc",["$http",function(t){this.fetch=function(){return t.get("/api/posts")},this.create=function(n){return t.post("/api/posts",n)}}]),angular.module("app").controller("RegisterCtrl",["$scope","UserSvc",function(t,n){t.register=function(e,o){n.register(e,o).then(function(n){t.$emit("login",n.data),t.username=null,t.password=null})}}]),angular.module("app").config(["$routeProvider",function(t){t.when("/",{controller:"PostsCtrl",templateUrl:"posts.html"}).when("/register",{controller:"RegisterCtrl",templateUrl:"register.html"}).when("/login",{controller:"LoginCtrl",templateUrl:"login.html"})}]),angular.module("app").service("UserSvc",["$http",function(t){var n=this;n.getUser=function(){return t.get("/api/users")},n.login=function(e,o){return t.post("/api/sessions",{username:e,password:o}).then(function(e){return n.token=e.data,t.defaults.headers.common["X-Auth"]=e.data,n.getUser()})},n.register=function(e,o){return t.post("/api/users",{username:e,password:o}).then(function(){return n.login(e,o)})}}]),angular.module("app").run(["$rootScope",function(){var t="ws://localhost:3000",n=new WebSocket(t);n.onopen=function(){console.log("WebSocket connected")}}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZS5qcyIsImFwcGxpY2F0aW9uLmN0cmwuanMiLCJsb2dpbi5jdHJsLmpzIiwicG9zdHMuY3RybC5qcyIsInBvc3RzLnN2Yy5qcyIsInJlZ2lzdGVyLmN0cmwuanMiLCJyb3V0ZXMuanMiLCJ1c2VyLnN2Yy5qcyIsIndlYnNvY2tldHMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsUUFBQSxPQUFBLE9BQ0EsWUNEQSxRQUFBLE9BQUEsT0FDQSxXQUFBLG1CQUFBLFNBQUEsU0FBQSxHQUNBLEVBQUEsSUFBQSxRQUFBLFNBQUEsRUFBQSxHQUNBLEVBQUEsWUFBQSxJQUVBLEVBQUEsT0FBQSxpQkFDQSxHQUFBLGdCQ05BLFFBQUEsT0FBQSxPQUNBLFdBQUEsYUFBQSxTQUFBLFVBQUEsU0FBQSxFQUFBLEdBQ0EsRUFBQSxNQUFBLFNBQUEsRUFBQSxHQUNBLEVBQUEsTUFBQSxFQUFBLEdBQ0EsS0FBQSxTQUFBLEdBQ0EsRUFBQSxNQUFBLFFBQUEsRUFBQSxNQUNBLEVBQUEsU0FBQSxLQUNBLEVBQUEsU0FBQSxXQ1BBLFFBQUEsT0FBQSxPQUNBLFdBQUEsYUFBQSxTQUFBLFdBQUEsU0FBQSxFQUFBLEdBQ0EsRUFBQSxRQUFBLFdBQ0EsRUFBQSxVQUNBLEVBQUEsUUFDQSxTQUFBLFlBQ0EsS0FBQSxFQUFBLFdBQ0EsUUFBQSxTQUFBLEdBQ0EsRUFBQSxNQUFBLFFBQUEsR0FDQSxFQUFBLFNBQUEsUUFLQSxFQUFBLFFBQUEsUUFBQSxTQUFBLEdBQ0EsRUFBQSxNQUFBLE9DZkEsUUFBQSxPQUFBLE9BQ0EsUUFBQSxZQUFBLFFBQUEsU0FBQSxHQUNBLEtBQUEsTUFBQSxXQUNBLE1BQUEsR0FBQSxJQUFBLGVBRUEsS0FBQSxPQUFBLFNBQUEsR0FDQSxNQUFBLEdBQUEsS0FBQSxhQUFBLE9DTkEsUUFBQSxPQUFBLE9BQ0EsV0FBQSxnQkFBQSxTQUFBLFVBQUEsU0FBQSxFQUFBLEdBQ0EsRUFBQSxTQUFBLFNBQUEsRUFBQSxHQUNBLEVBQUEsU0FBQSxFQUFBLEdBQ0EsS0FBQSxTQUFBLEdBQ0EsRUFBQSxNQUFBLFFBQUEsRUFBQSxNQUNBLEVBQUEsU0FBQSxLQUNBLEVBQUEsU0FBQSxXQ1BBLFFBQUEsT0FBQSxPQUNBLFFBQUEsaUJBQUEsU0FBQSxHQUNBLEVBQ0EsS0FBQSxLQUNBLFdBQUEsWUFDQSxZQUFBLGVBRUEsS0FBQSxhQUNBLFdBQUEsZUFDQSxZQUFBLGtCQUVBLEtBQUEsVUFDQSxXQUFBLFlBQ0EsWUFBQSxrQkNiQSxRQUFBLE9BQUEsT0FDQSxRQUFBLFdBQUEsUUFBQSxTQUFBLEdBQ0EsR0FBQSxHQUFBLElBQ0EsR0FBQSxRQUFBLFdBQ0EsTUFBQSxHQUFBLElBQUEsZUFFQSxFQUFBLE1BQUEsU0FBQSxFQUFBLEdBQ0EsTUFBQSxHQUFBLEtBQUEsaUJBQ0EsU0FBQSxFQUFBLFNBQUEsSUFDQSxLQUFBLFNBQUEsR0FHQSxNQUZBLEdBQUEsTUFBQSxFQUFBLEtBQ0EsRUFBQSxTQUFBLFFBQUEsT0FBQSxVQUFBLEVBQUEsS0FDQSxFQUFBLGFBR0EsRUFBQSxTQUFBLFNBQUEsRUFBQSxHQUNBLE1BQUEsR0FBQSxLQUFBLGNBQ0EsU0FBQSxFQUFBLFNBQUEsSUFDQSxLQUFBLFdBQ0EsTUFBQSxHQUFBLE1BQUEsRUFBQSxTQ25CQSxRQUFBLE9BQUEsT0FDQSxLQUFBLGFBQUEsV0FDQSxHQUFBLEdBQUEsc0JBQ0EsRUFBQSxHQUFBLFdBQUEsRUFFQSxHQUFBLE9BQUEsV0FDQSxRQUFBLElBQUEiLCJmaWxlIjoiYXBwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiYW5ndWxhci5tb2R1bGUoJ2FwcCcsIFtcbiAgJ25nUm91dGUnXG5dKVxuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4uY29udHJvbGxlcignQXBwbGljYXRpb25DdHJsJywgZnVuY3Rpb24gKCRzY29wZSkge1xuICAkc2NvcGUuJG9uKCdsb2dpbicsIGZ1bmN0aW9uIChfLCB1c2VyKSB7XG4gICAgJHNjb3BlLmN1cnJlbnRVc2VyID0gdXNlclxuICB9KVxuICAkc2NvcGUubG9nb3V0ID0gZnVuY3Rpb24gKCkge1xuICAgIGRlbGV0ZSAkc2NvcGUuY3VycmVudFVzZXJcbiAgfVxufSlcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuLmNvbnRyb2xsZXIoJ0xvZ2luQ3RybCcsIGZ1bmN0aW9uICgkc2NvcGUsIFVzZXJTdmMpIHtcbiAgJHNjb3BlLmxvZ2luID0gZnVuY3Rpb24gKHVzZXJuYW1lLCBwYXNzd29yZCkge1xuICAgIFVzZXJTdmMubG9naW4odXNlcm5hbWUsIHBhc3N3b3JkKVxuICAgIC50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgJHNjb3BlLiRlbWl0KCdsb2dpbicsIHJlc3BvbnNlLmRhdGEpXG4gICAgICAkc2NvcGUudXNlcm5hbWUgPSBudWxsXG4gICAgICAkc2NvcGUucGFzc3dvcmQgPSBudWxsXG4gICAgfSlcbiAgfVxufSlcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuLmNvbnRyb2xsZXIoJ1Bvc3RzQ3RybCcsIGZ1bmN0aW9uICgkc2NvcGUsIFBvc3RzU3ZjKSB7XG4gICRzY29wZS5hZGRQb3N0ID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICgkc2NvcGUucG9zdEJvZHkpIHtcbiAgICAgIFBvc3RzU3ZjLmNyZWF0ZSh7XG4gICAgICAgIHVzZXJuYW1lOiAnZGlja2V5eHh4JyxcbiAgICAgICAgYm9keTogJHNjb3BlLnBvc3RCb2R5XG4gICAgICB9KS5zdWNjZXNzKGZ1bmN0aW9uIChwb3N0KSB7XG4gICAgICAgICRzY29wZS5wb3N0cy51bnNoaWZ0KHBvc3QpXG4gICAgICAgICRzY29wZS5wb3N0Qm9keSA9IG51bGxcbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgUG9zdHNTdmMuZmV0Y2goKS5zdWNjZXNzKGZ1bmN0aW9uIChwb3N0cykge1xuICAgICRzY29wZS5wb3N0cyA9IHBvc3RzXG4gIH0pXG59KVxuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4uc2VydmljZSgnUG9zdHNTdmMnLCBmdW5jdGlvbiAoJGh0dHApIHtcbiAgdGhpcy5mZXRjaCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL3Bvc3RzJylcbiAgfVxuICB0aGlzLmNyZWF0ZSA9IGZ1bmN0aW9uIChwb3N0KSB7XG4gICAgcmV0dXJuICRodHRwLnBvc3QoJy9hcGkvcG9zdHMnLCBwb3N0KVxuICB9XG59KVxuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4uY29udHJvbGxlcignUmVnaXN0ZXJDdHJsJywgZnVuY3Rpb24gKCRzY29wZSwgVXNlclN2Yykge1xuICAkc2NvcGUucmVnaXN0ZXIgPSBmdW5jdGlvbiAodXNlcm5hbWUsIHBhc3N3b3JkKSB7XG4gICAgVXNlclN2Yy5yZWdpc3Rlcih1c2VybmFtZSwgcGFzc3dvcmQpXG4gICAgLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAkc2NvcGUuJGVtaXQoJ2xvZ2luJywgcmVzcG9uc2UuZGF0YSlcbiAgICAgICRzY29wZS51c2VybmFtZSA9IG51bGxcbiAgICAgICRzY29wZS5wYXNzd29yZCA9IG51bGxcbiAgICB9KVxuICB9XG59KVxuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4uY29uZmlnKGZ1bmN0aW9uICgkcm91dGVQcm92aWRlcikge1xuICAkcm91dGVQcm92aWRlclxuICAud2hlbignLycsIHtcbiAgICBjb250cm9sbGVyOiAnUG9zdHNDdHJsJyxcbiAgICB0ZW1wbGF0ZVVybDogJ3Bvc3RzLmh0bWwnXG4gIH0pXG4gIC53aGVuKCcvcmVnaXN0ZXInLCB7XG4gICAgY29udHJvbGxlcjogJ1JlZ2lzdGVyQ3RybCcsXG4gICAgdGVtcGxhdGVVcmw6ICdyZWdpc3Rlci5odG1sJ1xuICB9KVxuICAud2hlbignL2xvZ2luJywge1xuICAgIGNvbnRyb2xsZXI6ICdMb2dpbkN0cmwnLFxuICAgIHRlbXBsYXRlVXJsOiAnbG9naW4uaHRtbCdcbiAgfSlcbn0pXG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5zZXJ2aWNlKCdVc2VyU3ZjJywgZnVuY3Rpb24gKCRodHRwKSB7XG4gIHZhciBzdmMgPSB0aGlzXG4gIHN2Yy5nZXRVc2VyID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAkaHR0cC5nZXQoJy9hcGkvdXNlcnMnKVxuICB9XG4gIHN2Yy5sb2dpbiA9IGZ1bmN0aW9uICh1c2VybmFtZSwgcGFzc3dvcmQpIHtcbiAgICByZXR1cm4gJGh0dHAucG9zdCgnL2FwaS9zZXNzaW9ucycsIHtcbiAgICAgIHVzZXJuYW1lOiB1c2VybmFtZSwgcGFzc3dvcmQ6IHBhc3N3b3JkXG4gICAgfSkudGhlbihmdW5jdGlvbiAodmFsKSB7XG4gICAgICBzdmMudG9rZW4gPSB2YWwuZGF0YVxuICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb25bJ1gtQXV0aCddID0gdmFsLmRhdGFcbiAgICAgIHJldHVybiBzdmMuZ2V0VXNlcigpXG4gICAgfSlcbiAgfVxuICBzdmMucmVnaXN0ZXIgPSBmdW5jdGlvbiAodXNlcm5hbWUsIHBhc3N3b3JkKSB7XG4gICAgcmV0dXJuICRodHRwLnBvc3QoJy9hcGkvdXNlcnMnLCB7XG4gICAgICB1c2VybmFtZTogdXNlcm5hbWUsIHBhc3N3b3JkOiBwYXNzd29yZFxuICAgIH0pLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHN2Yy5sb2dpbih1c2VybmFtZSwgcGFzc3dvcmQpXG4gICAgfSlcbiAgfVxufSlcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuLnJ1bihmdW5jdGlvbiAoJHJvb3RTY29wZSkge1xuICB2YXIgdXJsID0gJ3dzOi8vbG9jYWxob3N0OjMwMDAnXG4gIHZhciBjb25uZWN0aW9uID0gbmV3IFdlYlNvY2tldCh1cmwpXG5cbiAgY29ubmVjdGlvbi5vbm9wZW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgY29uc29sZS5sb2coJ1dlYlNvY2tldCBjb25uZWN0ZWQnKVxuICB9XG59KVxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9