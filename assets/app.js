angular.module("app",["ngRoute"]),angular.module("app").controller("ApplicationCtrl",["$scope",function(t){t.$on("login",function(n,e){t.currentUser=e}),t.logout=function(){delete t.currentUser}}]),angular.module("app").controller("LoginCtrl",["$scope","UserSvc",function(t,n){t.login=function(e,o){n.login(e,o).then(function(n){t.$emit("login",n.data),t.username=null,t.password=null})}}]),angular.module("app").controller("PostsCtrl",["$scope","PostsSvc",function(t,n){t.addPost=function(){t.postBody&&n.create({username:"dickeyxxx",body:t.postBody}).success(function(n){t.posts.unshift(n),t.postBody=null})},n.fetch().success(function(n){t.posts=n})}]),angular.module("app").service("PostsSvc",["$http",function(t){this.fetch=function(){return t.get("/api/posts")},this.create=function(n){return t.post("/api/posts",n)}}]),angular.module("app").controller("RegisterCtrl",["$scope","UserSvc",function(t,n){t.register=function(e,o){n.register(e,o).then(function(n){t.$emit("login",n.data),t.username=null,t.password=null})}}]),angular.module("app").config(["$routeProvider",function(t){t.when("/",{controller:"PostsCtrl",templateUrl:"posts.html"}).when("/register",{controller:"RegisterCtrl",templateUrl:"register.html"}).when("/login",{controller:"LoginCtrl",templateUrl:"login.html"})}]),angular.module("app").service("UserSvc",["$http",function(t){var n=this;n.getUser=function(){return t.get("/api/users")},n.login=function(e,o){return t.post("/api/sessions",{username:e,password:o}).then(function(e){return n.token=e.data,t.defaults.headers.common["X-Auth"]=e.data,n.getUser()})},n.register=function(e,o){return t.post("/api/users",{username:e,password:o}).then(function(){return n.login(e,o)})}}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZS5qcyIsImFwcGxpY2F0aW9uLmN0cmwuanMiLCJsb2dpbi5jdHJsLmpzIiwicG9zdHMuY3RybC5qcyIsInBvc3RzLnN2Yy5qcyIsInJlZ2lzdGVyLmN0cmwuanMiLCJyb3V0ZXMuanMiLCJ1c2VyLnN2Yy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxRQUFBLE9BQUEsT0FDQSxZQ0RBLFFBQUEsT0FBQSxPQUNBLFdBQUEsbUJBQUEsU0FBQSxTQUFBLEdBQ0EsRUFBQSxJQUFBLFFBQUEsU0FBQSxFQUFBLEdBQ0EsRUFBQSxZQUFBLElBRUEsRUFBQSxPQUFBLGlCQUNBLEdBQUEsZ0JDTkEsUUFBQSxPQUFBLE9BQ0EsV0FBQSxhQUFBLFNBQUEsVUFBQSxTQUFBLEVBQUEsR0FDQSxFQUFBLE1BQUEsU0FBQSxFQUFBLEdBQ0EsRUFBQSxNQUFBLEVBQUEsR0FDQSxLQUFBLFNBQUEsR0FDQSxFQUFBLE1BQUEsUUFBQSxFQUFBLE1BQ0EsRUFBQSxTQUFBLEtBQ0EsRUFBQSxTQUFBLFdDUEEsUUFBQSxPQUFBLE9BQ0EsV0FBQSxhQUFBLFNBQUEsV0FBQSxTQUFBLEVBQUEsR0FDQSxFQUFBLFFBQUEsV0FDQSxFQUFBLFVBQ0EsRUFBQSxRQUNBLFNBQUEsWUFDQSxLQUFBLEVBQUEsV0FDQSxRQUFBLFNBQUEsR0FDQSxFQUFBLE1BQUEsUUFBQSxHQUNBLEVBQUEsU0FBQSxRQUtBLEVBQUEsUUFBQSxRQUFBLFNBQUEsR0FDQSxFQUFBLE1BQUEsT0NmQSxRQUFBLE9BQUEsT0FDQSxRQUFBLFlBQUEsUUFBQSxTQUFBLEdBQ0EsS0FBQSxNQUFBLFdBQ0EsTUFBQSxHQUFBLElBQUEsZUFFQSxLQUFBLE9BQUEsU0FBQSxHQUNBLE1BQUEsR0FBQSxLQUFBLGFBQUEsT0NOQSxRQUFBLE9BQUEsT0FDQSxXQUFBLGdCQUFBLFNBQUEsVUFBQSxTQUFBLEVBQUEsR0FDQSxFQUFBLFNBQUEsU0FBQSxFQUFBLEdBQ0EsRUFBQSxTQUFBLEVBQUEsR0FDQSxLQUFBLFNBQUEsR0FDQSxFQUFBLE1BQUEsUUFBQSxFQUFBLE1BQ0EsRUFBQSxTQUFBLEtBQ0EsRUFBQSxTQUFBLFdDUEEsUUFBQSxPQUFBLE9BQ0EsUUFBQSxpQkFBQSxTQUFBLEdBQ0EsRUFDQSxLQUFBLEtBQ0EsV0FBQSxZQUNBLFlBQUEsZUFFQSxLQUFBLGFBQ0EsV0FBQSxlQUNBLFlBQUEsa0JBRUEsS0FBQSxVQUNBLFdBQUEsWUFDQSxZQUFBLGtCQ2JBLFFBQUEsT0FBQSxPQUNBLFFBQUEsV0FBQSxRQUFBLFNBQUEsR0FDQSxHQUFBLEdBQUEsSUFDQSxHQUFBLFFBQUEsV0FDQSxNQUFBLEdBQUEsSUFBQSxlQUVBLEVBQUEsTUFBQSxTQUFBLEVBQUEsR0FDQSxNQUFBLEdBQUEsS0FBQSxpQkFDQSxTQUFBLEVBQUEsU0FBQSxJQUNBLEtBQUEsU0FBQSxHQUdBLE1BRkEsR0FBQSxNQUFBLEVBQUEsS0FDQSxFQUFBLFNBQUEsUUFBQSxPQUFBLFVBQUEsRUFBQSxLQUNBLEVBQUEsYUFHQSxFQUFBLFNBQUEsU0FBQSxFQUFBLEdBQ0EsTUFBQSxHQUFBLEtBQUEsY0FDQSxTQUFBLEVBQUEsU0FBQSxJQUNBLEtBQUEsV0FDQSxNQUFBLEdBQUEsTUFBQSxFQUFBIiwiZmlsZSI6ImFwcC5qcyIsInNvdXJjZXNDb250ZW50IjpbImFuZ3VsYXIubW9kdWxlKCdhcHAnLCBbXG4gICduZ1JvdXRlJ1xuXSlcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuLmNvbnRyb2xsZXIoJ0FwcGxpY2F0aW9uQ3RybCcsIGZ1bmN0aW9uICgkc2NvcGUpIHtcbiAgJHNjb3BlLiRvbignbG9naW4nLCBmdW5jdGlvbiAoXywgdXNlcikge1xuICAgICRzY29wZS5jdXJyZW50VXNlciA9IHVzZXJcbiAgfSlcbiAgJHNjb3BlLmxvZ291dCA9IGZ1bmN0aW9uICgpIHtcbiAgICBkZWxldGUgJHNjb3BlLmN1cnJlbnRVc2VyXG4gIH1cbn0pXG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5jb250cm9sbGVyKCdMb2dpbkN0cmwnLCBmdW5jdGlvbiAoJHNjb3BlLCBVc2VyU3ZjKSB7XG4gICRzY29wZS5sb2dpbiA9IGZ1bmN0aW9uICh1c2VybmFtZSwgcGFzc3dvcmQpIHtcbiAgICBVc2VyU3ZjLmxvZ2luKHVzZXJuYW1lLCBwYXNzd29yZClcbiAgICAudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICRzY29wZS4kZW1pdCgnbG9naW4nLCByZXNwb25zZS5kYXRhKVxuICAgICAgJHNjb3BlLnVzZXJuYW1lID0gbnVsbFxuICAgICAgJHNjb3BlLnBhc3N3b3JkID0gbnVsbFxuICAgIH0pXG4gIH1cbn0pXG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5jb250cm9sbGVyKCdQb3N0c0N0cmwnLCBmdW5jdGlvbiAoJHNjb3BlLCBQb3N0c1N2Yykge1xuICAkc2NvcGUuYWRkUG9zdCA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoJHNjb3BlLnBvc3RCb2R5KSB7XG4gICAgICBQb3N0c1N2Yy5jcmVhdGUoe1xuICAgICAgICB1c2VybmFtZTogJ2RpY2tleXh4eCcsXG4gICAgICAgIGJvZHk6ICRzY29wZS5wb3N0Qm9keVxuICAgICAgfSkuc3VjY2VzcyhmdW5jdGlvbiAocG9zdCkge1xuICAgICAgICAkc2NvcGUucG9zdHMudW5zaGlmdChwb3N0KVxuICAgICAgICAkc2NvcGUucG9zdEJvZHkgPSBudWxsXG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIFBvc3RzU3ZjLmZldGNoKCkuc3VjY2VzcyhmdW5jdGlvbiAocG9zdHMpIHtcbiAgICAkc2NvcGUucG9zdHMgPSBwb3N0c1xuICB9KVxufSlcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuLnNlcnZpY2UoJ1Bvc3RzU3ZjJywgZnVuY3Rpb24gKCRodHRwKSB7XG4gIHRoaXMuZmV0Y2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICRodHRwLmdldCgnL2FwaS9wb3N0cycpXG4gIH1cbiAgdGhpcy5jcmVhdGUgPSBmdW5jdGlvbiAocG9zdCkge1xuICAgIHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL3Bvc3RzJywgcG9zdClcbiAgfVxufSlcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuLmNvbnRyb2xsZXIoJ1JlZ2lzdGVyQ3RybCcsIGZ1bmN0aW9uICgkc2NvcGUsIFVzZXJTdmMpIHtcbiAgJHNjb3BlLnJlZ2lzdGVyID0gZnVuY3Rpb24gKHVzZXJuYW1lLCBwYXNzd29yZCkge1xuICAgIFVzZXJTdmMucmVnaXN0ZXIodXNlcm5hbWUsIHBhc3N3b3JkKVxuICAgIC50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgJHNjb3BlLiRlbWl0KCdsb2dpbicsIHJlc3BvbnNlLmRhdGEpXG4gICAgICAkc2NvcGUudXNlcm5hbWUgPSBudWxsXG4gICAgICAkc2NvcGUucGFzc3dvcmQgPSBudWxsXG4gICAgfSlcbiAgfVxufSlcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuLmNvbmZpZyhmdW5jdGlvbiAoJHJvdXRlUHJvdmlkZXIpIHtcbiAgJHJvdXRlUHJvdmlkZXJcbiAgLndoZW4oJy8nLCB7XG4gICAgY29udHJvbGxlcjogJ1Bvc3RzQ3RybCcsXG4gICAgdGVtcGxhdGVVcmw6ICdwb3N0cy5odG1sJ1xuICB9KVxuICAud2hlbignL3JlZ2lzdGVyJywge1xuICAgIGNvbnRyb2xsZXI6ICdSZWdpc3RlckN0cmwnLFxuICAgIHRlbXBsYXRlVXJsOiAncmVnaXN0ZXIuaHRtbCdcbiAgfSlcbiAgLndoZW4oJy9sb2dpbicsIHtcbiAgICBjb250cm9sbGVyOiAnTG9naW5DdHJsJyxcbiAgICB0ZW1wbGF0ZVVybDogJ2xvZ2luLmh0bWwnXG4gIH0pXG59KVxuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4uc2VydmljZSgnVXNlclN2YycsIGZ1bmN0aW9uICgkaHR0cCkge1xuICB2YXIgc3ZjID0gdGhpc1xuICBzdmMuZ2V0VXNlciA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL3VzZXJzJylcbiAgfVxuICBzdmMubG9naW4gPSBmdW5jdGlvbiAodXNlcm5hbWUsIHBhc3N3b3JkKSB7XG4gICAgcmV0dXJuICRodHRwLnBvc3QoJy9hcGkvc2Vzc2lvbnMnLCB7XG4gICAgICB1c2VybmFtZTogdXNlcm5hbWUsIHBhc3N3b3JkOiBwYXNzd29yZFxuICAgIH0pLnRoZW4oZnVuY3Rpb24gKHZhbCkge1xuICAgICAgc3ZjLnRva2VuID0gdmFsLmRhdGFcbiAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uWydYLUF1dGgnXSA9IHZhbC5kYXRhXG4gICAgICByZXR1cm4gc3ZjLmdldFVzZXIoKVxuICAgIH0pXG4gIH1cbiAgc3ZjLnJlZ2lzdGVyID0gZnVuY3Rpb24gKHVzZXJuYW1lLCBwYXNzd29yZCkge1xuICAgIHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL3VzZXJzJywge1xuICAgICAgdXNlcm5hbWU6IHVzZXJuYW1lLCBwYXNzd29yZDogcGFzc3dvcmRcbiAgICB9KS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBzdmMubG9naW4odXNlcm5hbWUsIHBhc3N3b3JkKVxuICAgIH0pXG4gIH1cbn0pXG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=